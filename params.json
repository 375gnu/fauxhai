{"body":"Fauxhai\r\n=======\r\nFauxhai is a gem for mocking out [ohai](https://github.com/opscode/ohai) data in your chef testing. Fauxhai is community supported, so we need **your help** to populate our dataset. Here's an example for testing my \"awesome_cookbook\" on Ubuntu:\r\n\r\n**Fauxhai is still in alpha stages and should not be considered stable! Pull Requests and feedback are welcome :)**\r\n\r\n```ruby\r\nrequire 'chefspec'\r\n\r\ndescribe 'awesome_cookbook::default' do\r\n  before do\r\n    Fauxhai.mock(platform:'ubuntu', version:'12.04')\r\n  end\r\n\r\n  it 'should install awesome' do\r\n    @runner = ChefSpec::ChefRunner.new.converge('tmpreaper::default')\r\n    @runner.should install_package 'awesome'\r\n  end\r\nend\r\n```\r\n\r\nAlternatively, you can pull \"real\" ohai data from an existing server:\r\n\r\n```ruby\r\nrequire 'chefspec'\r\n\r\ndescribe 'awesome_cookbook::default' do\r\n  before do\r\n    Fauxhai.mock(url:'server01.example.com')\r\n  end\r\n\r\n  it 'should install awesome' do\r\n    @runner = ChefSpec::ChefRunner.new.converge('tmpreaper::default')\r\n    @runner.should install_package 'awesome'\r\n  end\r\nend\r\n```\r\n\r\nFauxhai supports [ChefSpec](https://github.com/acrmp/chefspec) and [rspec-chef](https://github.com/calavera/rspec-chef). In order to prevent polluting the README, only ChefSpec examples will be provided. However, there is an extensive README for each testing framework in the [examples](https://github.com/customink/fauxhai/tree/master/examples) directory.\r\n\r\nImportant Note\r\n--------------\r\nFauxhai ships with a command line tool - `fauxhai`. This is **not** the same as Fauxhai.mock. Running `fauxhai` on a machine effectively runs `ohai`, but then sanitizes the data, removing/replacing things like:\r\n\r\n- users\r\n- ssh keys\r\n- usernames in paths\r\n- sensitive system information\r\n\r\n`fauxhai` should only be used by developers wishing to submit a new json file.\r\n\r\nUsage\r\n-----\r\nFauxhai provides a bunch of default attributes so that you don't need to mock out your entire infastructure to write a simple test. That being said, not all configurations will suit your needs. Because of that, Fauxhai provides two ways to configure your mocks:\r\n\r\n### Overriding\r\n`Fauxhai.mock` will also accept a block with override attributes that are merged with all the default attributes. For example, the default Ubutnu 12.04 mock uses `Ruby 1.9.3`. Maybe your system is using `ree`, and you want to verify that the cookbooks work with that data as well:\r\n\r\n```ruby\r\nrequire 'chefspec'\r\n\r\ndescribe 'awesome_cookbook::default' do\r\n  before do\r\n    Fauxhai.mock(platform:'ubuntu', version:'12.04') do |node|\r\n      node['languages']['ruby']['version'] = 'ree'\r\n    end\r\n  end\r\n\r\n  it 'should install awesome' do\r\n    @runner = ChefSpec::ChefRunner.new.converge('tmpreaper::default')\r\n    @runner.should install_package 'awesome'\r\n  end\r\nend\r\n```\r\n\r\nThe `node` block variable allows you to set any Ohai attribute on the mock that you want. This provides an easy way to manage your environments. If you find that you are overridding attributes like OS or platform, you should see the section on Contributing.\r\n\r\n### Fetching\r\nAlternatively, if you do not want to mock the data, Fauxhai provides a `fetch` mechanism for collecting \"real\" ohai data from a remote server or local file. Maybe you want to test against the fully-replicated environment for a front-facing server in your pool. Just pass in the `url` option instead of a `platform`:\r\n\r\n```ruby\r\nrequire 'chefspec'\r\n\r\ndescribe 'awesome_cookbook::default' do\r\n  before do\r\n    Fauxhai.mock(url:'server01.example.com')\r\n  end\r\n\r\n  it 'should install awesome' do\r\n    @runner = ChefSpec::ChefRunner.new.converge('tmpreaper::default')\r\n    @runner.should install_package 'awesome'\r\n  end\r\nend\r\n```\r\n\r\nThis will ssh into the machine (you must have authorization to run `sudo ohai` on that machine), download a copy of the ohai output, and optionally cache that data inside the test directory (speeding up future tests).\r\n\r\n### Overriding + Fetching\r\nAs you might expect, you can combine overriding and fetching like so:\r\n\r\n```ruby\r\nrequire 'chefspec'\r\n\r\ndescribe 'awesome_cookbook::default' do\r\n  before do\r\n    Fauxhai.mock(url:'server01.example.com') do |node|\r\n      node['languages']['ruby']['version'] = 'ree'\r\n    end\r\n  end\r\n\r\n  it 'should install awesome' do\r\n    @runner = ChefSpec::ChefRunner.new.converge('tmpreaper::default')\r\n    @runner.should install_package 'awesome'\r\n  end\r\nend\r\n```\r\n\r\nContributing\r\n------------\r\nFauxhai is community-maintained and updated. Aside from the initial files, all of the ohai system mocks have been created by the community. If you have a system that you think would benefit the community, here's how you get it into [fauxhai](https://github.com/customink/fauxhai):\r\n\r\n1. Build a system to your liking (on a virtual machine, for example)\r\n2. Install chef, ohai, and fauxhai\r\n3. Run the following at the command line:\r\n\r\n        sudo fauxhai\r\n\r\n4. This will create a file `/tmp/fauxhai.json`\r\n5. Copy the contents of this file to your local development machine (using scp or sftp, for example)\r\n6. Clone and `bundle` this repo:\r\n\r\n        git clone git@github.com:customink/fauxhai.git\r\n        cd fauxhai\r\n        bundle\r\n\r\n7. Create a new branch named `add_[platform]_[version]` (e.g. `add_ubuntu_12_04`) without dashes and dots replaced with underscores. Be sure to use the official version number, not a package name (e.g. '12_04', not 'precise') if avaliable:\r\n\r\n        Ubuntu Precise, 12.04       add_ubuntu_12_04\r\n        Ubuntu Lucid, 11.5          add_ubuntu_11_5\r\n        OSX Lion, 10.7.4            add_osx_10_7_4\r\n        Windows XP                  add_windows_xp\r\n\r\n    **Q:** Is there a reason for this super-specific naming convention?\r\n    **A:** No, but it helps in tracking problems and analyzing pull requests. Ultimately it just ensures your pull request is merged as quickly as possible.\r\n\r\n8. Create a new json file in `fauxhai/[os]/[version].json` (e.g. `fauxhai/ubuntu/12_04.json`)\r\n9. Copy-paste the contents of the file from `Step 4` into this file and save\r\n10. Verify the installation was successful by doing the following:\r\n\r\n        irb -rubygems -rfauxhai\r\n        Fauxhai.mock('[os]', '[version') # e.g. Fauxhai.mock('ubuntu', '12.04')\r\n\r\n    As long as that does not throw an error, you're good to go!\r\n\r\n11. Submit a pull request on github\r\n","name":"Fauxhai","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Easily mock full ohai data","google":""}